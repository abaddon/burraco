/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package com.abaddon83

import com.abaddon83.burracoGame.adapters.burracoGameControllerAdapters.rest.handleExceptions.errorsHandling
import com.abaddon83.burracoGame.adapters.burracoGameControllerAdapters.rest.routes.apiBurracoGames
import com.abaddon83.burracoGame.adapters.burracoGameControllerAdapters.rest.routes.apiGames
import com.abaddon83.burracoGame.iocs.AppAdapters
import com.abaddon83.burracoGame.ports.BurracoGameControllerPort
import com.abaddon83.burracoGame.shared.players.PlayerIdentity
import com.abaddon83.utils.ddd.UUIDIdentity
import com.fasterxml.jackson.databind.ObjectMapper
import com.fasterxml.jackson.databind.SerializationFeature
import io.ktor.application.Application
import io.ktor.application.install
import io.ktor.features.*
import io.ktor.http.ContentType
import io.ktor.jackson.JacksonConverter
import io.ktor.jackson.jackson
import io.ktor.routing.Routing
import io.ktor.routing.route
import io.ktor.routing.routing
import io.ktor.server.engine.commandLineEnvironment
import io.ktor.server.engine.embeddedServer
import io.ktor.server.netty.Netty
import org.koin.ktor.ext.Koin
import org.koin.ktor.ext.inject
import java.text.DateFormat
import java.util.*

//class App {
//    val greeting: String
//        get() {
//            return "Hello world."
//        }
//}
//
//fun main(args: Array<String>) {
//    println(App().greeting)
//}

fun Application.di() {
    //DI setup
    install(Koin) {
        printLogger()
        modules(AppAdapters)
    }
}

fun Application.main() {
    val controller: BurracoGameControllerPort by inject()

    //HTTP
    install(DefaultHeaders)
    install(CallLogging)
    install(ContentNegotiation) {
        jackson {
            configure(SerializationFeature.INDENT_OUTPUT, true)
            register(ContentType.Application.Json, JacksonConverter())
        }
    }

    install(StatusPages) {
        errorsHandling()
    }
    install(Routing) {
        apiGames(controller)
        apiBurracoGames(controller)
    }
}

fun main(args: Array<String>) {
    embeddedServer(Netty, commandLineEnvironment(args)).start()
}
